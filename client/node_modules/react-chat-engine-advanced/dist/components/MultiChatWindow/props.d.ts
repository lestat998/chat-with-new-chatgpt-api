/// <reference types="react" />
import { ChatObject, MessageObject, PersonObject } from 'react-chat-engine-advanced/dist/interfaces';
import { ChatEngineStyles } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/styles';
import { ChatListProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatList/props';
import { ChatFormProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatList/ChatForm/props';
import { ChatCardProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatList/ChatCard/props';
import { ChatFeedProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatFeed/props';
import { ChatHeaderProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatFeed/ChatHeader/props';
import { MessageListProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatFeed/MessageList/props';
import { MessageProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatFeed/MessageList/Message/props';
import { MessageFormProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatFeed/MessageForm/props';
import { WelcomeGifProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatFeed/WelcomeGif/props';
import { ChatSettingsProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatSettings/props';
import { ChatAvatarsProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatSettings/ChatAvatars/props';
import { PeopleSettingsProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatSettings/PeopleSettings/props';
import { PhotosSettingsProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatSettings/PhotosSettings/props';
import { OptionsSettingsProps } from 'react-chat-engine-advanced/dist/components/MultiChatWindow/ChatSettings/OptionsSettings/props';
export interface MultiChatWindowProps extends ChatEngineStyles {
    username?: string;
    chats?: ChatObject[];
    activeChatId?: number;
    messages?: MessageObject[];
    peopleToInvite?: PersonObject[];
    timezoneOffset?: number;
    isChatListLoading?: boolean;
    isChatFeedLoading?: boolean;
    isChatSettingsLoading?: boolean;
    hasMoreChats?: boolean;
    hasMoreMessages?: boolean;
    isMobileChatListOpen?: boolean;
    isMobileChatSettingsOpen?: boolean;
    onChatCardClick?: (chatId: number) => Promise<void>;
    onChatFormSubmit?: (title: string) => Promise<void>;
    onChatLoaderShow?: () => Promise<void>;
    onMessageLoaderShow?: () => Promise<void>;
    onMessageLoaderHide?: () => Promise<void>;
    onBottomMessageShow?: () => Promise<void>;
    onBottomMessageHide?: () => Promise<void>;
    onMessageFormSubmit?: (message: MessageObject) => Promise<void>;
    onInvitePersonClick?: (person: PersonObject) => Promise<void>;
    onRemovePersonClick?: (person: PersonObject) => Promise<void>;
    onDeleteChatClick?: (chat: ChatObject) => Promise<void>;
    onMobileChatListClick?: () => Promise<void>;
    onMobileChatSettingsClick?: () => Promise<void>;
    onCloseMobileChatSettingsClick?: () => Promise<void>;
    renderChatList?: (props: ChatListProps) => JSX.Element | Element | React.FC<ChatListProps>;
    renderChatForm?: (props: ChatFormProps) => JSX.Element | Element | React.FC<ChatFormProps>;
    renderChatCard?: (props: ChatCardProps) => JSX.Element | Element | React.FC<ChatCardProps>;
    renderChatFeed?: (props: ChatFeedProps) => JSX.Element | Element | React.FC<ChatFeedProps>;
    renderChatHeader?: (props: ChatHeaderProps) => JSX.Element | Element | React.FC<ChatHeaderProps>;
    renderMessageList?: (props: MessageListProps) => JSX.Element | Element | React.FC<MessageListProps>;
    renderMessage?: (props: MessageProps) => JSX.Element | Element | React.FC<MessageProps>;
    renderWelcomeGif?: (props: WelcomeGifProps) => JSX.Element | Element | React.FC<WelcomeGifProps>;
    renderMessageForm?: (props: MessageFormProps) => JSX.Element | Element | React.FC<MessageFormProps>;
    renderChatSettings?: (props: ChatSettingsProps) => JSX.Element | Element | React.FC<ChatSettingsProps>;
    renderChatAvatars?: (props: ChatAvatarsProps) => JSX.Element | Element | React.FC<PeopleSettingsProps>;
    renderPeopleSettings?: (props: PeopleSettingsProps) => JSX.Element | Element | React.FC<PeopleSettingsProps>;
    renderPhotosSettings?: (props: PhotosSettingsProps) => JSX.Element | Element | React.FC<PhotosSettingsProps>;
    renderOptionsSettings?: (props: OptionsSettingsProps) => JSX.Element | Element | React.FC<OptionsSettingsProps>;
}
